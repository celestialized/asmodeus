import sys, math
import numpy as np

def airMassKastenYoung(altitude, observerElevation = 0):
    if altitude > 0:
        return (airDensity(observerElevation) / 1.28) / (math.sin(math.radians(altitude)) + 0.50572 * (math.radians(altitude) + 6.07995) ** (-1.6364))
    else:
        return 1e6

airMass = airMassKastenYoung

def airDensityLogMSIS(altitude):
    if altitude >= 149000:
        return 0

    f, i = math.modf(altitude / 1000)
    i = int(i)

    logs = [-6.689423284665149, -6.8006962066887295, -6.905757276319464, -7.008017700920531, -7.109626695020807, -7.2133298042755065, -7.3213029632836575, -7.434879675717631, -7.555355644586112, -7.683414881116547, -7.8200539895867545,
            -7.9644581645730375, -8.115401488674381, -8.269942564758795, -8.426895553435457, -8.584401941109688, -8.7415875246321, -8.898453610827584, -9.055047487570148, -9.212743256592493, -9.370978717938995, -9.530132498346198,
            -9.689990378273723, -9.850515667770022, -10.011295505170434, -10.171890010255952, -10.332426016829935, -10.492995698336587, -10.652570365426376, -10.811810114761107, -10.970019947740827, -11.126983023350927, -11.283402306691979,
            -11.438746066795977, -11.593810193710691, -11.748900995099817, -11.903157192437803, -12.056102118953879, -12.207273366106692, -12.356430527118736, -12.502593666649158, -12.645818687615213, -12.785891140783116, -12.92228376568867,
            -13.054704728930513, -13.183175516801086, -13.307488861531018, -13.42820942048378, -13.547011304929267, -13.664507684427747, -13.780143414126982, -13.896612159401316, -14.013230056938326, -14.131180666956224, -14.25061047120213,
            -14.372031140992394, -14.495544099378836, -14.621378608588339, -14.749201804518597, -14.878852232550464, -15.010193315383118, -15.142781578634704, -15.276959592684925, -15.412525950399818, -15.549378548776552, -15.686962796101577,
            -15.826172584249285, -15.966233301649075, -16.107155710919987, -16.248432152686323, -16.391086174667112, -16.534520599302827, -16.678987252397793, -16.82412545734928, -16.97094221027594, -17.119127611287567, -17.268843694046957,
            -17.42004886364446, -17.572240678986386, -17.726034687268683, -17.881267663334462, -18.038143140487907, -18.19593847127446, -18.35489300341436, -18.515321148106487, -18.67712258066809, -18.84029548766497, -19.004973519600227,
            -19.17103339828309, -19.338472601952787, -19.507463280866897, -19.677702769368118, -19.850300229810628, -20.025628751113615, -20.203876982519933, -20.384653035826087, -20.56882948364199, -20.756926038439047, -20.947785334440553,
            -21.141816184603233, -21.338711509842504, -21.5383546883116, -21.739100699156953, -21.940323880821, -22.141257284809555, -22.340232015801302, -22.53665760630158, -22.7302006878395, -22.920590419282963, -23.10576031316876,
            -23.286307016138647, -23.461569081219643, -23.63117040013488, -23.795447282663808, -23.953961238619954, -24.107016305004844, -24.25479972033657, -24.396271941904057, -24.532281092300327, -24.66214629654444, -24.7855305057051,
            -24.9018619516161, -25.010709829134345, -25.113324643317558, -25.209764493217005, -25.302768276185926, -25.392974544072075, -25.47960781073624, -25.56327267283976, -25.644380405104254, -25.722812834057247, -25.798919767417114,
            -25.872990799444622, -25.944807364692398, -26.014607589758022, -26.08260790533222, -26.148962132824277, -26.213712701279487, -26.276733550943746, -26.33848813462313, -26.398752442447766, -26.4579199752697, -26.515551710194014,
            -26.571842896505846, -26.627452375947332, -26.681682530008192, -26.734933091371914, -26.78730107688923, -26.83848119149057, -26.88908377119917]
    
    return math.exp(logs[i] + (logs[i+1] - logs[i]) * f) * 1000

airDensity = airDensityLogMSIS


def luminousEfficiency(speed):
    if speed < 6200:
        return 0
    elif speed < 20000:
        zeta = (-2.1887e-9 + 4.2903e-13 * speed - 1.2447e-17 * speed**2) * speed**2
    elif speed < 60000:
        zeta = 2.37044e-6 * speed**1.25
    elif speed < 100000:
        zeta = -12.835 + speed * (6.7672e-4 + speed * (-1.163076e-8 + speed * (9.191681e-14 + speed * -2.7465805e-19)))
    else:
        zeta = 1.615 + speed * 1.3725e-5

    return 2 * 7.668e6 * zeta / speed**2
